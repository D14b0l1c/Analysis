import os
import sys

# Import extractors and matchers for both PCAP and Nmap XML
from core.pcap_extractor import export_pcap_to_csv
from core.xml_extractor import export_nmap_xml_to_csv
from core.vulnerability_matcher import match_pcap_to_exploits, match_nmap_to_exploits

def run_pcap_pipeline(pcap_path: str):
    """
    Executes the extraction and matching pipeline for PCAP input.

    Parameters:
        pcap_path (str): Path to the input PCAP file.
    """
    # Define file paths for output
    extracted_csv = "data/output/pcap_extracted_output.csv"
    matches_csv = "data/output/pcap_matches.csv"
    exploit_csv_path = os.path.join("exploit_db", "index", "exploitdb_with_nvd.csv")

    # Step 1: Extract features from the PCAP using tshark
    print(f"[1/3] Extracting fields from PCAP: {pcap_path}")
    export_pcap_to_csv(pcap_path, extracted_csv)

    # Step 2: Match extracted data to known exploits
    print(f"[2/3] Matching traffic to known exploits from: {exploit_csv_path}")
    df = match_pcap_to_exploits(extracted_csv, exploit_csv_path, matches_csv)

    # Step 3: Output results
    print(f"[3/3] PCAP analysis complete. {len(df)} potential matches found.")
    print(f"Results written to: {matches_csv}")


def run_nmap_pipeline(xml_path: str):
    """
    Executes the extraction and matching pipeline for Nmap XML input.

    Parameters:
        xml_path (str): Path to the input Nmap XML file.
    """
    # Define file paths for output
    extracted_csv = "data/output/nmap_extracted_output.csv"
    matches_csv = "data/output/nmap_matches.csv"
    exploit_csv_path = os.path.join("exploit_db", "index", "exploitdb_with_nvd.csv")

    # Step 1: Extract Nmap scan fields into tabular format
    print(f"[1/3] Extracting fields from Nmap XML: {xml_path}")
    export_nmap_xml_to_csv(xml_path, extracted_csv)

    # Step 2: Match to exploits using service name, product, version, or CPE
    print(f"[2/3] Matching discovered services to known exploits...")
    df = match_nmap_to_exploits(extracted_csv, exploit_csv_path, matches_csv)

    # Step 3: Output results
    print(f"[3/3] Nmap analysis complete. {len(df)} potential matches found.")
    print(f"Results written to: {matches_csv}")


def run_pipeline(input_file: str):
    """
    Routes the input file to the appropriate analysis pipeline.

    Parameters:
        input_file (str): Full path to the input PCAP or XML file.
    """
    # Determine file type based on its extension
    ext = os.path.splitext(input_file)[1].lower()

    if ext == ".pcap":
        run_pcap_pipeline(input_file)
    elif ext == ".xml":
        run_nmap_pipeline(input_file)
    else:
        # Handle unsupported file types
        print(f"Unsupported file extension: {ext}")
        print("Supported types: .pcap, .xml")


if __name__ == "__main__":
    # Default path for testing if user presses Enter
    default_path = "data/input/vulnerable_traffic.pcap"
    
    # Prompt user for input file, fallback to default
    user_input = input(f"Enter path to input file [{default_path}]: ").strip()
    input_path = user_input if user_input else default_path

    # Ensure the file exists before proceeding
    if not os.path.isfile(input_path):
        print(f"File not found: {input_path}")
        sys.exit(1)

    # Run the correct pipeline for this input
    run_pipeline(input_path)