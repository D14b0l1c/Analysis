#!/usr/bin/env python3
"""
Vulnerability Assessment Engine
Demonstrates usage of the unified vulnerability database for comprehensive security assessments.
"""

import sqlite3
import pandas as pd
import os
import re
from collections import defaultdict, Counter
import json
from datetime import datetime


class VulnerabilityAssessment:
    def __init__(self):
        self.db_file = os.path.join("exploit_db", "index", "vulnerability_index.db")
        self.csv_file = os.path.join("exploit_db", "index", "vulnerability_index.csv")
        
        # Check if database exists
        if not os.path.exists(self.db_file):
            print(f"[!] Database not found at {self.db_file}")
            print("[!] Please run vulnerability_merger.py first")
            return
            
        self.conn = sqlite3.connect(self.db_file)
        print(f"[âœ“] Connected to vulnerability database: {self.db_file}")
    
    def search_by_cve(self, cve_id):
        """Search for vulnerability by CVE ID"""
        
        query = "SELECT * FROM vulnerabilities WHERE cve_id = ?"
        cursor = self.conn.cursor()
        cursor.execute(query, (cve_id,))
        
        results = cursor.fetchall()
        columns = [description[0] for description in cursor.description]
        
        return [dict(zip(columns, row)) for row in results]
    
    def search_by_vendor_product(self, vendor=None, product=None):
        """Search vulnerabilities by vendor and/or product"""
        
        conditions = []
        params = []
        
        if vendor:
            conditions.append("vendors LIKE ?")
            params.append(f"%{vendor}%")
            
        if product:
            conditions.append("products LIKE ?")
            params.append(f"%{product}%")
        
        if not conditions:
            return []
        
        query = f"SELECT * FROM vulnerabilities WHERE {' AND '.join(conditions)}"
        cursor = self.conn.cursor()
        cursor.execute(query, params)
        
        results = cursor.fetchall()
        columns = [description[0] for description in cursor.description]
        
        return [dict(zip(columns, row)) for row in results]
    
    def search_exploitable_vulnerabilities(self, severity_filter=None):
        """Find vulnerabilities with available exploits"""
        
        query = "SELECT * FROM vulnerabilities WHERE exploit_available = 'Yes'"
        params = []
        
        if severity_filter:
            query += " AND cvss_severity = ?"
            params.append(severity_filter)
            
        query += " ORDER BY cvss_score DESC"
        
        cursor = self.conn.cursor()
        cursor.execute(query, params)
        
        results = cursor.fetchall()
        columns = [description[0] for description in cursor.description]
        
        return [dict(zip(columns, row)) for row in results]
    
    def search_routersploit_vulnerabilities(self):
        """Find RouterSploit specific vulnerabilities"""
        
        query = "SELECT * FROM vulnerabilities WHERE source LIKE '%RouterSploit%'"
        cursor = self.conn.cursor()
        cursor.execute(query)
        
        results = cursor.fetchall()
        columns = [description[0] for description in cursor.description]
        
        return [dict(zip(columns, row)) for row in results]
    
    def full_text_search(self, search_term):
        """Perform full-text search across vulnerability descriptions"""
        
        query = """
        SELECT v.* FROM vulnerabilities v
        JOIN vulnerabilities_fts fts ON v.cve_id = fts.cve_id
        WHERE vulnerabilities_fts MATCH ?
        """
        
        cursor = self.conn.cursor()
        cursor.execute(query, (search_term,))
        
        results = cursor.fetchall()
        columns = [description[0] for description in cursor.description]
        
        return [dict(zip(columns, row)) for row in results]
    
    def assess_target_system(self, vendors=None, products=None, keywords=None):
        """Comprehensive vulnerability assessment for a target system"""
        
        print(f"\n[*] Vulnerability Assessment")
        print("=" * 40)
        
        if vendors:
            print(f"Target Vendors: {', '.join(vendors)}")
        if products:
            print(f"Target Products: {', '.join(products)}")
        if keywords:
            print(f"Keywords: {', '.join(keywords)}")
        print()
        
        assessment_results = {
            'vendor_product_vulns': [],
            'keyword_vulns': [],
            'routersploit_vulns': [],
            'critical_exploitable': [],
            'summary': {}
        }
        
        # Search by vendors/products
        if vendors or products:
            for vendor in (vendors or ['']):
                for product in (products or ['']):
                    vulns = self.search_by_vendor_product(vendor, product)
                    assessment_results['vendor_product_vulns'].extend(vulns)
        
        # Search by keywords
        if keywords:
            for keyword in keywords:
                vulns = self.full_text_search(keyword)
                assessment_results['keyword_vulns'].extend(vulns)
        
        # RouterSploit vulnerabilities
        rs_vulns = self.search_routersploit_vulnerabilities()
        if vendors:
            # Filter RouterSploit vulnerabilities by target vendors
            filtered_rs = []
            for vuln in rs_vulns:
                for vendor in vendors:
                    if vendor.lower() in vuln.get('vendors', '').lower():
                        filtered_rs.append(vuln)
            assessment_results['routersploit_vulns'] = filtered_rs
        else:
            assessment_results['routersploit_vulns'] = rs_vulns
        
        # Critical exploitable vulnerabilities
        critical_exploitable = self.search_exploitable_vulnerabilities('CRITICAL')
        assessment_results['critical_exploitable'] = critical_exploitable
        
        # Generate summary
        all_vulns = []
        all_vulns.extend(assessment_results['vendor_product_vulns'])
        all_vulns.extend(assessment_results['keyword_vulns'])
        all_vulns.extend(assessment_results['routersploit_vulns'])
        
        # Remove duplicates based on CVE ID
        unique_vulns = {}
        for vuln in all_vulns:
            cve_id = vuln.get('cve_id', '')
            if cve_id not in unique_vulns:
                unique_vulns[cve_id] = vuln
        
        assessment_results['summary'] = self.generate_assessment_summary(list(unique_vulns.values()))
        
        return assessment_results
    
    def generate_assessment_summary(self, vulnerabilities):
        """Generate comprehensive assessment summary"""
        
        summary = {
            'total_vulnerabilities': len(vulnerabilities),
            'exploitable_count': 0,
            'severity_breakdown': Counter(),
            'source_breakdown': Counter(),
            'vendor_breakdown': Counter(),
            'recent_vulns': 0,
            'routersploit_modules': []
        }
        
        for vuln in vulnerabilities:
            # Exploitable count
            if vuln.get('exploit_available') == 'Yes':
                summary['exploitable_count'] += 1
            
            # Severity breakdown
            severity = vuln.get('cvss_severity', 'Unknown')
            if severity:
                summary['severity_breakdown'][severity] += 1
            
            # Source breakdown
            sources = vuln.get('source', '').split(';')
            for source in sources:
                if source:
                    summary['source_breakdown'][source] += 1
            
            # Vendor breakdown
            vendors = vuln.get('vendors', '').split(';')
            for vendor in vendors:
                if vendor:
                    summary['vendor_breakdown'][vendor] += 1
            
            # RouterSploit modules
            rs_module = vuln.get('routersploit_module', '')
            if rs_module:
                summary['routersploit_modules'].append(rs_module)
            
            # Recent vulnerabilities (2024)
            pub_date = vuln.get('published_date', '')
            if '2024' in pub_date:
                summary['recent_vulns'] += 1
        
        return summary
    
    def print_assessment_results(self, results):
        """Print formatted assessment results"""
        
        summary = results['summary']
        
        print(f"Assessment Summary:")
        print(f"  Total Vulnerabilities Found: {summary['total_vulnerabilities']}")
        print(f"  Exploitable Vulnerabilities: {summary['exploitable_count']}")
        print(f"  Recent (2024) Vulnerabilities: {summary['recent_vulns']}")
        
        if summary['severity_breakdown']:
            print(f"\n  Severity Breakdown:")
            for severity, count in summary['severity_breakdown'].most_common():
                print(f"    - {severity}: {count}")
        
        if summary['source_breakdown']:
            print(f"\n  Source Breakdown:")
            for source, count in summary['source_breakdown'].most_common():
                print(f"    - {source}: {count}")
        
        if summary['vendor_breakdown']:
            print(f"\n  Top Affected Vendors:")
            for vendor, count in summary['vendor_breakdown'].most_common(10):
                print(f"    - {vendor}: {count}")
        
        # RouterSploit specific findings
        if results['routersploit_vulns']:
            print(f"\n  RouterSploit Vulnerabilities Found: {len(results['routersploit_vulns'])}")
            for vuln in results['routersploit_vulns'][:5]:  # Show first 5
                print(f"    - {vuln.get('cve_id', 'N/A')}: {vuln.get('target_device', 'Unknown device')}")
                print(f"      Module: {vuln.get('routersploit_module', 'N/A')}")
                print(f"      Severity: {vuln.get('cvss_severity', 'Unknown')}")
        
        # Critical exploitable vulnerabilities
        if results['critical_exploitable']:
            print(f"\n  Critical Exploitable Vulnerabilities: {len(results['critical_exploitable'])}")
            for vuln in results['critical_exploitable'][:5]:  # Show first 5
                print(f"    - {vuln.get('cve_id', 'N/A')}: {vuln.get('description', 'No description')[:100]}...")
                print(f"      CVSS Score: {vuln.get('cvss_score', 'N/A')}")
                print(f"      Exploit: {vuln.get('exploit_title', 'N/A')}")
    
    def export_assessment_report(self, results, filename=None):
        """Export assessment results to JSON report"""
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"vulnerability_assessment_{timestamp}.json"
        
        # Prepare data for JSON serialization
        json_results = {
            'assessment_timestamp': datetime.now().isoformat(),
            'summary': dict(results['summary']),
            'total_vendor_product_vulns': len(results['vendor_product_vulns']),
            'total_keyword_vulns': len(results['keyword_vulns']),
            'total_routersploit_vulns': len(results['routersploit_vulns']),
            'total_critical_exploitable': len(results['critical_exploitable']),
            'routersploit_details': results['routersploit_vulns'],
            'critical_exploitable_sample': results['critical_exploitable'][:10]  # First 10
        }
        
        # Convert Counter objects to regular dicts
        for key in ['severity_breakdown', 'source_breakdown', 'vendor_breakdown']:
            if key in json_results['summary']:
                json_results['summary'][key] = dict(json_results['summary'][key])
        
        with open(filename, 'w') as f:
            json.dump(json_results, f, indent=2, default=str)
        
        print(f"\n[âœ“] Assessment report exported to: {filename}")
        return filename


def demo_vulnerability_assessment():
    """Demonstrate the vulnerability assessment capabilities"""
    
    print("[*] Vulnerability Assessment Demo")
    print("=" * 45)
    
    # Initialize assessment engine
    assessment = VulnerabilityAssessment()
    
    # Demo 1: Router/IoT Assessment
    print("\n[Demo 1] Router/IoT Device Assessment")
    router_results = assessment.assess_target_system(
        vendors=['D-Link', 'Netgear', 'ASUS', 'TP-Link'],
        keywords=['router', 'wireless', 'firmware']
    )
    assessment.print_assessment_results(router_results)
    
    # Demo 2: Web Application Assessment
    print("\n\n[Demo 2] Web Application Assessment")
    webapp_results = assessment.assess_target_system(
        keywords=['web application', 'sql injection', 'xss', 'php', 'apache']
    )
    assessment.print_assessment_results(webapp_results)
    
    # Demo 3: Specific CVE Lookup
    print("\n\n[Demo 3] Specific CVE Lookup")
    cve_result = assessment.search_by_cve('CVE-2024-50623')
    if cve_result:
        vuln = cve_result[0]
        print(f"CVE Details:")
        print(f"  ID: {vuln.get('cve_id')}")
        print(f"  Description: {vuln.get('description', 'N/A')[:200]}...")
        print(f"  Severity: {vuln.get('cvss_severity', 'N/A')}")
        print(f"  Exploit Available: {vuln.get('exploit_available', 'N/A')}")
        print(f"  Source: {vuln.get('source', 'N/A')}")
    else:
        print("CVE not found in database")
    
    # Demo 4: RouterSploit Specific Assessment
    print("\n\n[Demo 4] RouterSploit Vulnerability Assessment")
    rs_vulns = assessment.search_routersploit_vulnerabilities()
    print(f"Total RouterSploit vulnerabilities: {len(rs_vulns)}")
    
    if rs_vulns:
        print("\nRouterSploit Modules Available:")
        for vuln in rs_vulns[:10]:  # Show first 10
            print(f"  - {vuln.get('routersploit_module', 'N/A')}")
            print(f"    Target: {vuln.get('target_device', 'Unknown')}")
            print(f"    Severity: {vuln.get('cvss_severity', 'Unknown')}")
            print(f"    CVE: {vuln.get('cve_id', 'N/A')}")
    
    # Export demo report
    print("\n\n[Demo 5] Export Assessment Report")
    assessment.export_assessment_report(router_results, "demo_router_assessment.json")
    
    print("\n[âœ“] Vulnerability Assessment Demo Completed!")
    print("[âœ“] Database contains comprehensive vulnerability intelligence!")


if __name__ == "__main__":
    demo_vulnerability_assessment()