import os
import json
import pandas as pd

# Set paths to input JSON and output CSV files
input_file = os.path.join("exploit_db", "nvd", "cve-2025.json")
output_file = os.path.join("exploit_db", "nvd", "flattened_nvd.csv")

# This list will store the processed CVE records
records = []

# Open and parse the NVD JSON file
with open(input_file, "r", encoding="utf-8") as f:
    data = json.load(f)

    # Loop through CVE items in the JSON data
    for item in data.get("CVE_Items", []):
        # Extract the CVE ID (e.g., CVE-2025-1234)
        cve_id = item["cve"]["CVE_data_meta"]["ID"]

        # Extract CVE description (first entry in the list)
        description_data = item["cve"]["description"]["description_data"]
        description = description_data[0]["value"] if description_data else ""

        # Extract affected vendors (if available)
        vendor_data = item.get("cve", {}).get("affects", {}).get("vendor", {}).get("vendor_data", [])
        vendors = [v["vendor_name"] for v in vendor_data] if vendor_data else []

        # Extract CVSS v3 score and vector (if present)
        cvss_v3 = item.get("impact", {}).get("baseMetricV3", {}).get("cvssV3", {})
        score = cvss_v3.get("baseScore", "")
        vector = cvss_v3.get("vectorString", "")

        # Append the structured CVE data to the records list
        records.append({
            "cve_id": cve_id,
            "description": description,
            "vendors": ";".join(vendors),
            "cvss_score": score,
            "cvss_vector": vector
        })

# Convert the list of records to a DataFrame and export to CSV
df = pd.DataFrame(records)
df.to_csv(output_file, index=False)

# Confirmation output
print(f"[âœ“] Flattened NVD data saved to: {output_file}")
