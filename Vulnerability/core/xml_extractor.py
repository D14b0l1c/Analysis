
import xml.etree.ElementTree as ET
import pandas as pd
import re
import json
from typing import Dict, List, Optional, Tuple
from datetime import datetime

def export_nmap_xml_to_csv(xml_path: str, output_csv: str, display: bool = True) -> None:
    """
    Extracts key information from an Nmap XML file and writes it to a CSV file.

    Parameters:
    - xml_path (str): Full path to the Nmap XML input file.
    - output_csv (str): Destination path for the extracted CSV output.
    - display (bool): If True, prints progress and errors to the console.
    """
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()

        extracted_data = []
        for host in root.findall("host"):
            ip_elem = host.find("address")
            ip_address = ip_elem.attrib.get("addr") if ip_elem is not None else None

            ports = host.find("ports")
            if ports is not None:
                for port in ports.findall("port"):
                    protocol = port.attrib.get("protocol")
                    port_id = port.attrib.get("portid")
                    state = port.find("state").attrib.get("state") if port.find("state") is not None else None

                    service = port.find("service")
                    service_name = service.attrib.get("name") if service is not None else None
                    product = service.attrib.get("product") if service is not None else None
                    version = service.attrib.get("version") if service is not None else None
                    cpe = service.find("cpe").text if service is not None and service.find("cpe") is not None else None

                    # Extract additional service details
                    extrainfo = service.attrib.get("extrainfo") if service is not None else None
                    ostype = service.attrib.get("ostype") if service is not None else None
                    method = service.attrib.get("method") if service is not None else None
                    conf = service.attrib.get("conf") if service is not None else None
                    
                    # Extract script results for vulnerability detection
                    scripts = []
                    script_elements = port.findall("script")
                    for script in script_elements:
                        script_id = script.attrib.get("id", "")
                        script_output = script.attrib.get("output", "")
                        scripts.append(f"{script_id}: {script_output}")
                    
                    script_results = " | ".join(scripts) if scripts else None

                    extracted_data.append({
                        "ip_address": ip_address,
                        "protocol": protocol,
                        "port": port_id,
                        "state": state,
                        "service_name": service_name,
                        "product": product,
                        "version": version,
                        "extrainfo": extrainfo,
                        "ostype": ostype,
                        "method": method,
                        "conf": conf,
                        "cpe": cpe,
                        "script_results": script_results
                    })

        df = pd.DataFrame(extracted_data)
        df.to_csv(output_csv, index=False)

        if display:
            print(f"Export complete: {output_csv}")
    except Exception as e:
        if display:
            print(f"Error parsing XML: {e}")

def export_nmap_with_vuln_analysis(xml_path: str, output_csv: str, include_scripts: bool = True, display: bool = True) -> Dict:
    """
    Nmap XML extraction with vulnerability analysis.
    
    Parameters:
    - xml_path (str): Full path to the Nmap XML input file.
    - output_csv (str): Destination path for the extracted CSV output.
    - include_scripts (bool): Whether to include NSE script results.
    - display (bool): If True, prints progress and errors to the console.
    
    Returns:
    - Dict: Analysis summary with vulnerability metrics.
    """
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()
        
        # Extract scan metadata
        scan_info = {
            'scan_time': root.attrib.get('startstr', ''),
            'scanner': root.attrib.get('scanner', 'nmap'),
            'version': root.attrib.get('version', ''),
            'args': root.attrib.get('args', '')
        }

        extracted_data = []
        host_summary = {
            'total_hosts': 0,
            'hosts_up': 0,
            'total_ports': 0,
            'open_ports': 0,
            'vulnerable_services': 0,
            'critical_vulns': 0
        }

        for host in root.findall("host"):
            host_summary['total_hosts'] += 1
            
            # Host information
            status = host.find("status")
            host_state = status.attrib.get("state") if status is not None else "unknown"
            if host_state == "up":
                host_summary['hosts_up'] += 1
            
            # Get all addresses (IPv4, IPv6, MAC)
            addresses = {}
            for addr in host.findall("address"):
                addr_type = addr.attrib.get("addrtype", "unknown")
                addresses[addr_type] = addr.attrib.get("addr", "")
            
            ip_address = addresses.get("ipv4") or addresses.get("ipv6") or ""
            mac_address = addresses.get("mac", "")
            
            # Host names
            hostnames = []
            hostname_elem = host.find("hostnames")
            if hostname_elem is not None:
                for hostname in hostname_elem.findall("hostname"):
                    hostnames.append(hostname.attrib.get("name", ""))
            hostname_list = ", ".join(hostnames) if hostnames else ""
            
            # OS Detection
            os_info = {}
            os_elem = host.find("os")
            if os_elem is not None:
                osmatch = os_elem.find("osmatch")
                if osmatch is not None:
                    os_info = {
                        'name': osmatch.attrib.get("name", ""),
                        'accuracy': osmatch.attrib.get("accuracy", ""),
                        'line': osmatch.attrib.get("line", "")
                    }

            # Port and service analysis
            ports = host.find("ports")
            if ports is not None:
                for port in ports.findall("port"):
                    host_summary['total_ports'] += 1
                    
                    protocol = port.attrib.get("protocol")
                    port_id = port.attrib.get("portid")
                    
                    # Port state
                    state_elem = port.find("state")
                    state = state_elem.attrib.get("state") if state_elem is not None else None
                    reason = state_elem.attrib.get("reason") if state_elem is not None else None
                    
                    if state == "open":
                        host_summary['open_ports'] += 1
                    
                    # Service information
                    service = port.find("service")
                    service_info = {}
                    if service is not None:
                        service_info = {
                            'name': service.attrib.get("name", ""),
                            'product': service.attrib.get("product", ""),
                            'version': service.attrib.get("version", ""),
                            'extrainfo': service.attrib.get("extrainfo", ""),
                            'ostype': service.attrib.get("ostype", ""),
                            'method': service.attrib.get("method", ""),
                            'conf': service.attrib.get("conf", "")
                        }
                        
                        # Extract CPEs
                        cpes = []
                        for cpe_elem in service.findall("cpe"):
                            cpes.append(cpe_elem.text)
                        service_info['cpes'] = ", ".join(cpes) if cpes else ""
                    
                    # NSE Script results - vulnerability detection
                    scripts = {}
                    vuln_count = 0
                    critical_vuln = False
                    
                    if include_scripts:
                        for script in port.findall("script"):
                            script_id = script.attrib.get("id", "")
                            script_output = script.attrib.get("output", "")
                            scripts[script_id] = script_output
                            
                            # Check for vulnerability indicators
                            if any(vuln_keyword in script_id.lower() for vuln_keyword in 
                                   ['vuln', 'cve', 'exploit', 'backdoor', 'dos']):
                                vuln_count += 1
                                host_summary['vulnerable_services'] += 1
                                
                                # Check for critical vulnerabilities
                                if any(critical_keyword in script_output.lower() for critical_keyword in
                                       ['critical', 'remote code execution', 'rce', 'backdoor']):
                                    critical_vuln = True
                                    host_summary['critical_vulns'] += 1
                    
                    # Risk assessment based on service and port
                    risk_level = assess_service_risk(port_id, service_info.get('name', ''), 
                                                   service_info.get('product', ''), 
                                                   service_info.get('version', ''))
                    
                    extracted_data.append({
                        # Host information
                        "ip_address": ip_address,
                        "mac_address": mac_address,
                        "hostnames": hostname_list,
                        "host_state": host_state,
                        
                        # OS information
                        "os_name": os_info.get('name', ''),
                        "os_accuracy": os_info.get('accuracy', ''),
                        
                        # Port and protocol
                        "protocol": protocol,
                        "port": port_id,
                        "state": state,
                        "reason": reason,
                        
                        # Service details
                        "service_name": service_info.get('name', ''),
                        "product": service_info.get('product', ''),
                        "version": service_info.get('version', ''),
                        "extrainfo": service_info.get('extrainfo', ''),
                        "ostype": service_info.get('ostype', ''),
                        "method": service_info.get('method', ''),
                        "conf": service_info.get('conf', ''),
                        "cpes": service_info.get('cpes', ''),
                        
                        # Vulnerability analysis
                        "script_count": len(scripts),
                        "vuln_scripts": vuln_count,
                        "has_critical_vuln": critical_vuln,
                        "risk_level": risk_level,
                        "script_results": json.dumps(scripts) if scripts else ""
                    })

        # Save to CSV
        df = pd.DataFrame(extracted_data)
        df.to_csv(output_csv, index=False)

        # Compile analysis results
        analysis_summary = {
            'scan_metadata': scan_info,
            'host_summary': host_summary,
            'extraction_time': datetime.now().isoformat(),
            'output_file': output_csv,
            'total_records': len(extracted_data)
        }

        if display:
            print(f"XML extraction complete: {output_csv}")
            print(f"Hosts scanned: {host_summary['total_hosts']}, Hosts up: {host_summary['hosts_up']}")
            print(f"Total ports: {host_summary['total_ports']}, Open ports: {host_summary['open_ports']}")
            print(f"Vulnerable services: {host_summary['vulnerable_services']}")
            print(f"Critical vulnerabilities: {host_summary['critical_vulns']}")
            
        return analysis_summary
        
    except Exception as e:
        error_msg = f"Error parsing XML: {e}"
        if display:
            print(error_msg)
        return {'error': error_msg}


def assess_service_risk(port: str, service: str, product: str, version: str) -> str:
    """
    Assess risk level of a discovered service based on port, service type, and version.
    
    Returns: 'CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO'
    """
    port_num = int(port) if port.isdigit() else 0
    
    # Critical risk services/ports
    critical_ports = [21, 23, 53, 135, 139, 445, 1433, 1521, 3389]  # FTP, Telnet, DNS, RPC, NetBIOS, SMB, SQL, RDP
    critical_services = ['ftp', 'telnet', 'rlogin', 'rsh', 'finger']
    
    # High risk services
    high_risk_services = ['ssh', 'smtp', 'pop3', 'imap', 'snmp', 'ldap', 'mysql', 'postgresql']
    high_risk_ports = [22, 25, 110, 143, 161, 389, 3306, 5432]
    
    # Medium risk services
    medium_risk_services = ['http', 'https', 'dns', 'ntp', 'dhcp']
    medium_risk_ports = [53, 80, 123, 443, 8080, 8443]
    
    # Check for critical conditions
    if (port_num in critical_ports or 
        service.lower() in critical_services or
        'backdoor' in product.lower() or
        'trojan' in product.lower()):
        return 'CRITICAL'
    
    # Check for high risk
    if (port_num in high_risk_ports or 
        service.lower() in high_risk_services or
        any(keyword in product.lower() for keyword in ['admin', 'management', 'config'])):
        return 'HIGH'
    
    # Check for medium risk
    if (port_num in medium_risk_ports or 
        service.lower() in medium_risk_services):
        return 'MEDIUM'
    
    # Low risk for common services
    if service.lower() in ['http', 'https'] and port_num in [80, 443]:
        return 'LOW'
    
    return 'INFO'


def extract_vulnerability_indicators(xml_path: str) -> Dict:
    """
    Extract specific vulnerability indicators from Nmap XML.
    
    Returns dictionary with categorized vulnerability findings.
    """
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()
        
        indicators = {
            'cve_references': [],
            'vulnerable_services': [],
            'weak_configurations': [],
            'exposed_services': [],
            'suspicious_findings': []
        }
        
        for host in root.findall("host"):
            ip_elem = host.find("address")
            ip_address = ip_elem.attrib.get("addr") if ip_elem is not None else "unknown"
            
            ports = host.find("ports")
            if ports is not None:
                for port in ports.findall("port"):
                    port_id = port.attrib.get("portid")
                    
                    # Check scripts for vulnerability indicators
                    for script in port.findall("script"):
                        script_id = script.attrib.get("id", "")
                        script_output = script.attrib.get("output", "")
                        
                        # Extract CVE references
                        cve_pattern = r'CVE-\d{4}-\d{4,7}'
                        cves = re.findall(cve_pattern, script_output, re.IGNORECASE)
                        for cve in cves:
                            indicators['cve_references'].append({
                                'host': ip_address,
                                'port': port_id,
                                'cve': cve.upper(),
                                'script': script_id
                            })
                        
                        # Identify vulnerable services
                        vuln_keywords = ['vulnerable', 'exploit', 'backdoor', 'weakness']
                        if any(keyword in script_output.lower() for keyword in vuln_keywords):
                            indicators['vulnerable_services'].append({
                                'host': ip_address,
                                'port': port_id,
                                'finding': script_output[:200],  # Truncate for readability
                                'script': script_id
                            })
                        
                        # Check for weak configurations
                        weak_configs = ['default password', 'anonymous', 'weak cipher', 'no encryption']
                        if any(config in script_output.lower() for config in weak_configs):
                            indicators['weak_configurations'].append({
                                'host': ip_address,
                                'port': port_id,
                                'issue': script_output[:200],
                                'script': script_id
                            })
                    
                    # Check for exposed dangerous services
                    service = port.find("service")
                    if service is not None:
                        service_name = service.attrib.get("name", "").lower()
                        dangerous_services = ['telnet', 'ftp', 'rsh', 'rlogin', 'finger']
                        
                        if service_name in dangerous_services:
                            indicators['exposed_services'].append({
                                'host': ip_address,
                                'port': port_id,
                                'service': service_name,
                                'risk': 'HIGH - Unencrypted protocol'
                            })
        
        return indicators
        
    except Exception as e:
        return {'error': f"Failed to extract vulnerability indicators: {str(e)}"}


def generate_nmap_vuln_report(xml_path: str, output_dir: str) -> Dict[str, str]:
    """
    Generate comprehensive vulnerability assessment report from Nmap XML.
    
    Parameters:
    - xml_path (str): Path to Nmap XML file
    - output_dir (str): Directory to save reports
    
    Returns:
    - Dict: Mapping of report types to file paths
    """
    import os
    
    os.makedirs(output_dir, exist_ok=True)
    
    # Extraction with vulnerability analysis
    main_csv = os.path.join(output_dir, "nmap_extract.csv")
    analysis_summary = export_nmap_with_vuln_analysis(xml_path, main_csv, include_scripts=True)
    
    # Extract specific vulnerability indicators
    vuln_indicators = extract_vulnerability_indicators(xml_path)
    
    # Save vulnerability indicators report
    vuln_json = os.path.join(output_dir, "vulnerability_indicators.json")
    with open(vuln_json, 'w') as f:
        json.dump(vuln_indicators, f, indent=2)
    
    # Save analysis summary
    summary_json = os.path.join(output_dir, "scan_analysis_summary.json")
    with open(summary_json, 'w') as f:
        json.dump(analysis_summary, f, indent=2)
    
    # Generate focused vulnerability CSV
    if not analysis_summary.get('error'):
        df = pd.read_csv(main_csv)
        
        # Filter for vulnerable services only
        vuln_df = df[
            (df['vuln_scripts'] > 0) | 
            (df['has_critical_vuln'] == True) |
            (df['risk_level'].isin(['CRITICAL', 'HIGH']))
        ]
        
        vuln_only_csv = os.path.join(output_dir, "vulnerable_services_only.csv")
        vuln_df.to_csv(vuln_only_csv, index=False)
    
    return {
        'main_extract': main_csv,
        'vulnerability_indicators': vuln_json,
        'analysis_summary': summary_json,
        'vulnerable_services_only': vuln_only_csv,
        'total_vulnerabilities': len(vuln_indicators.get('cve_references', [])),
        'vulnerable_hosts': len(set(v.get('host') for v in vuln_indicators.get('vulnerable_services', [])))
    }


# Example usage when run as a script
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        xml_file = sys.argv[1]
        output_csv = "nmap_extraction.csv"
        
        print("Nmap XML Vulnerability Extractor")
        print("=" * 45)
        
        # Run extraction
        analysis = export_nmap_with_vuln_analysis(xml_file, output_csv, include_scripts=True)
        
        if not analysis.get('error'):
            print(f"\nVulnerability Analysis:")
            host_summary = analysis['host_summary']
            print(f"Vulnerable services found: {host_summary['vulnerable_services']}")
            print(f"Critical vulnerabilities: {host_summary['critical_vulns']}")
            
            # Generate comprehensive report
            reports = generate_nmap_vuln_report(xml_file, "nmap_vulnerability_analysis")
            print(f"\nGenerated comprehensive vulnerability reports:")
            for report_type, file_path in reports.items():
                if isinstance(file_path, str) and file_path.endswith(('.csv', '.json')):
                    print(f"  {report_type}: {file_path}")
        else:
            print(f"Error: {analysis['error']}")
            
    else:
        print("Usage: python xml_extractor.py <nmap_xml_file>")
        print("Example: python xml_extractor.py nmap_scan_results.xml")
