import pandas as pd
import os
import re

# Define paths to required input and output files
nvd_file = os.path.join("exploit_db", "nvd", "flattened_nvd.csv")
exploitdb_file = os.path.join("exploit_db", "exploitdb", "files_exploits.csv")
output_file = os.path.join("exploit_db", "index", "exploitdb_with_nvd.csv")

# Load both datasets
df_nvd = pd.read_csv(nvd_file)
df_exploitdb = pd.read_csv(exploitdb_file)

# Normalize all column names to lowercase for consistency
df_exploitdb.columns = [col.strip().lower() for col in df_exploitdb.columns]
df_nvd.columns = [col.strip().lower() for col in df_nvd.columns]

# Define columns to scan for CVE identifiers in the ExploitDB dataset
cve_source_columns = [
    'description',
    'codes',
    'aliases',
    'screenshot_url',
    'application_url',
    'source_url'
]

def extract_cve_from_row(row):
    """
    Search a row of the ExploitDB dataset for a CVE ID using a regex pattern.

    Parameters:
    - row (pd.Series): A row from the DataFrame.

    Returns:
    - str: The first CVE ID found or an empty string.
    """
    for col in cve_source_columns:
        if col in row and isinstance(row[col], str):
            match = re.search(r"CVE-\d{4}-\d{4,7}", row[col], re.IGNORECASE)
            if match:
                return match.group(0).upper()
    return ""

# Apply CVE extraction to each row in the ExploitDB dataset
df_exploitdb["cve_id"] = df_exploitdb.apply(extract_cve_from_row, axis=1)

# Remove any rows where a CVE was not found
df_exploitdb = df_exploitdb[df_exploitdb["cve_id"] != ""]

# Merge with the NVD dataset on CVE ID
df_merged = pd.merge(df_exploitdb, df_nvd, on="cve_id", how="left")

# Save the final merged CSV
df_merged.to_csv(output_file, index=False)

# Output result summary
print(f"Merged ExploitDB with NVD CVEs and saved to: {output_file}")
print(f"Total merged rows: {len(df_merged)}")
